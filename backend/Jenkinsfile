pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                dir('backend') {
                    // This will print "Hello Jenkins from Backend"
                    echo 'Hello Jenkins from the backend folder'
                    // Add your build steps here, e.g., running npm install or npm build
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // This assumes you have set up a SonarQube server in Jenkins
                    def scannerHome = tool 'SonarQube Scanner' // The name of the SonarQube scanner tool
                    withSonarQubeEnv('Backend') { // The name you used for the SonarQube server
                        // Use the secret token for authentication
                        env.SONAR_TOKEN = credentials('SONAR') // Use the ID you provided
                        env.PROJECT_KEY = credentials('PROJECT_KEY')          
                        echo "SonarQube Token: ${env.SONAR_TOKEN}"
                        echo "Using Token for SonarQube"   
                        echo "SonarQube Project Key: ${env.PROJECT_KEY}"
                        echo "Using Project Key for SonarQube"      
                            sh """
                             ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.projectKey=${PROJECT_KEY} \
                            -Dsonar.sources=./backend
                             """

                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
